pipeline {
  agent {
    docker {
       image 'lavanth11/maven-java17-docker:v1'
       args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/lavanthreddy11/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://54.234.183.169:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
    environment {
        DOCKER_IMAGE = "lavanth11/ultimate-cicd:${BUILD_NUMBER}"
        DOCKER_CONFIG = "${WORKSPACE}/.docker"       // ‚úÖ fixes permission issue
        REGISTRY_CREDENTIALS = credentials('docker-cred')
    }
    steps {
        script {
            echo "üê≥ Building Docker Image..."
            sh '''
                cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                docker build -t ${DOCKER_IMAGE} .
            '''

            echo "üì§ Pushing Docker Image to Docker Hub..."
            docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                docker.image("${DOCKER_IMAGE}").push()
            }

            echo "‚úÖ Docker image ${DOCKER_IMAGE} pushed successfully."
           }
       }
    }
    stage('Update Deployment File') {
    environment {
        GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
        GIT_USER_NAME = "lavanthreddy11"
    }
    steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
            sh '''
                echo "üìù Updating deployment manifest..."
                
                # Go to Jenkins workspace root (repo root)
                cd $WORKSPACE

                # Verify .git folder exists
                if [ ! -d ".git" ]; then
                  echo "‚ùå ERROR: Not in a Git repository!"
                  exit 1
                fi

                git config user.email "abhishek.xyz@gmail.com"
                git config user.name "Abhishek Veeramalla"

                # Update image tag
                BUILD_NUMBER=${BUILD_NUMBER}
                sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

                git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
            '''
         }
        }
      }
    
     }
    }
  }

