pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "lavanth11/ultimate-cicd:${BUILD_NUMBER}"
        GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
        GIT_USER_NAME = "lavanthreddy11"
    }

    stages {

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build and Test') {
            agent {
                docker { image 'lavanth11/maven-java17-docker:v1' }
            }
            steps {
                sh '''
                    echo "üèóÔ∏è Building and testing the project..."
                    cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                    mvn clean package -DskipTests
                '''
            }
        }

        stage('Static Code Analysis') {
            agent {
                docker { image 'lavanth11/maven-java17-docker:v1' }
            }
            environment {
                SONAR_TOKEN = credentials('sonarqube')
            }
            steps {
                sh '''
                    echo "üîç Running SonarQube analysis..."
                    cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                    mvn sonar:sonar -Dsonar.projectKey=spring-boot-demo \
                        -Dsonar.host.url=http://54.234.183.169:9000 \
                        -Dsonar.login=${SONAR_TOKEN}
                '''
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    echo "üê≥ Building Docker Image..."
                    sh '''
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        docker build -t ${DOCKER_IMAGE} .
                    '''
                    echo "üì¶ Pushing Docker Image to Docker Hub..."
                    sh '''
                        echo "${REGISTRY_CREDENTIALS_PSW}" | docker login -u "${REGISTRY_CREDENTIALS_USR}" --password-stdin
                        docker push ${DOCKER_IMAGE}
                    '''
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        echo "üìù Updating deployment manifest..."

                        cd $WORKSPACE

                        if [ ! -d ".git" ]; then
                          echo "‚ùå .git directory not found! Check Jenkins SCM checkout settings."
                          exit 1
                        fi

                        git config user.email "abhishek.xyz@gmail.com"
                        git config user.name "Abhishek Veeramalla"

                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" \
                          java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "üöÄ Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline completed successfully!"
        }
        failure {
            echo "‚ùå Pipeline failed. Please check the logs."
        }
    }
}
