pipeline {
  agent {
    docker {
      // ‚úÖ Your custom Jenkins agent image with Java + Maven + Docker + ArgoCD CLI
      image 'lavanthreddy11/maven-java17-docker:v2'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

 

  stages {

    stage('Checkout') {
      steps {
        echo "‚úÖ Checking out source code..."
        // Optional: if Jenkins is not auto-checking out the code, uncomment below:
        // git branch: 'main', url: "https://github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git"
      }
    }

    stage('Build and Test') {
      steps {
        echo "üèóÔ∏è Building Maven project..."
        sh '''
          cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
          mvn clean package -DskipTests
        '''
      }
    }

    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            echo "üîç Running SonarQube analysis..."
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar \
              -Dsonar.projectKey=spring-boot-demo \
              -Dsonar.login=$SONAR_AUTH_TOKEN \
              -Dsonar.host.url=${SONAR_URL}
          '''
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          def imageTag = "${BUILD_NUMBER}"
          def dockerImage = "${DOCKER_HUB_USER}/ultimate-cicd:${imageTag}"

          echo "üê≥ Building Docker image: ${dockerImage}"
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${DOCKER_HUB_USER}/ultimate-cicd:${BUILD_NUMBER} .
          '''

          echo "üöÄ Pushing Docker image to Docker Hub..."
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            docker.image(dockerImage).push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            echo "üìù Updating Kubernetes manifest with new image tag..."
            git config user.email "abhishek.xyz@gmail.com"
            git config user.name "Abhishek Veeramalla"

            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
          '''
        }
      }
    }

    stage('Deploy with Argo CD') {
      steps {
        withCredentials([string(credentialsId: 'argocd-token', variable: 'ARGOCD_AUTH_TOKEN')]) {
          sh '''
            echo "üöÄ Triggering Argo CD sync..."
            argocd login ${ARGOCD_SERVER#https://} --insecure --username admin --password $ARGOCD_AUTH_TOKEN || true
            argocd app sync spring-boot-app --grpc-web --auth-token $ARGOCD_AUTH_TOKEN --server ${ARGOCD_SERVER#https://}
            echo "‚úÖ Argo CD deployment triggered successfully."
          '''
        }
      }
    }
  }

  post {
    success {
      echo "üéâ Pipeline completed successfully!"
    }
    failure {
      echo "‚ùå Pipeline failed. Check logs for details."
    }
  }
}
